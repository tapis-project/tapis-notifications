/*
 * This file is generated by jOOQ.
 */
package edu.utexas.tacc.tapis.notifications.gen.jooq.tables;


import edu.utexas.tacc.tapis.notifications.gen.jooq.Keys;
import edu.utexas.tacc.tapis.notifications.gen.jooq.TapisNtf;
import edu.utexas.tacc.tapis.notifications.gen.jooq.tables.records.NotificationsSeriesRecord;

import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class NotificationsSeries extends TableImpl<NotificationsSeriesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>tapis_ntf.notifications_series</code>
     */
    public static final NotificationsSeries NOTIFICATIONS_SERIES = new NotificationsSeries();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NotificationsSeriesRecord> getRecordType() {
        return NotificationsSeriesRecord.class;
    }

    /**
     * The column <code>tapis_ntf.notifications_series.tenant</code>.
     */
    public final TableField<NotificationsSeriesRecord, String> TENANT = createField(DSL.name("tenant"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>tapis_ntf.notifications_series.source</code>.
     */
    public final TableField<NotificationsSeriesRecord, String> SOURCE = createField(DSL.name("source"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>tapis_ntf.notifications_series.subject</code>.
     */
    public final TableField<NotificationsSeriesRecord, String> SUBJECT = createField(DSL.name("subject"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>tapis_ntf.notifications_series.series_id</code>.
     */
    public final TableField<NotificationsSeriesRecord, String> SERIES_ID = createField(DSL.name("series_id"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>tapis_ntf.notifications_series.seq_count</code>.
     */
    public final TableField<NotificationsSeriesRecord, Long> SEQ_COUNT = createField(DSL.name("seq_count"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field("0", SQLDataType.BIGINT)), this, "");

    private NotificationsSeries(Name alias, Table<NotificationsSeriesRecord> aliased) {
        this(alias, aliased, null);
    }

    private NotificationsSeries(Name alias, Table<NotificationsSeriesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>tapis_ntf.notifications_series</code> table
     * reference
     */
    public NotificationsSeries(String alias) {
        this(DSL.name(alias), NOTIFICATIONS_SERIES);
    }

    /**
     * Create an aliased <code>tapis_ntf.notifications_series</code> table
     * reference
     */
    public NotificationsSeries(Name alias) {
        this(alias, NOTIFICATIONS_SERIES);
    }

    /**
     * Create a <code>tapis_ntf.notifications_series</code> table reference
     */
    public NotificationsSeries() {
        this(DSL.name("notifications_series"), null);
    }

    public <O extends Record> NotificationsSeries(Table<O> child, ForeignKey<O, NotificationsSeriesRecord> key) {
        super(child, key, NOTIFICATIONS_SERIES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : TapisNtf.TAPIS_NTF;
    }

    @Override
    public UniqueKey<NotificationsSeriesRecord> getPrimaryKey() {
        return Keys.NOTIFICATIONS_SERIES_PKEY;
    }

    @Override
    public NotificationsSeries as(String alias) {
        return new NotificationsSeries(DSL.name(alias), this);
    }

    @Override
    public NotificationsSeries as(Name alias) {
        return new NotificationsSeries(alias, this);
    }

    @Override
    public NotificationsSeries as(Table<?> alias) {
        return new NotificationsSeries(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public NotificationsSeries rename(String name) {
        return new NotificationsSeries(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public NotificationsSeries rename(Name name) {
        return new NotificationsSeries(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public NotificationsSeries rename(Table<?> name) {
        return new NotificationsSeries(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<String, String, String, String, Long> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super String, ? super String, ? super String, ? super String, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super String, ? super String, ? super String, ? super String, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
