package edu.utexas.tacc.tapis.notifications.service;

import edu.utexas.tacc.tapis.notifications.dao.NotificationsDao;
import edu.utexas.tacc.tapis.notifications.model.DeliveryMethod;
import edu.utexas.tacc.tapis.notifications.model.Event;
import edu.utexas.tacc.tapis.notifications.model.Notification;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.inject.Inject;
import java.io.IOException;
import java.util.concurrent.Callable;

/*
 * Callable for sending out a single notification generated by a bucket manager.
 */
public final class DeliveryTask implements Callable<String>
{
  /* ********************************************************************** */
  /*                               Constants                                */
  /* ********************************************************************** */
  // Tracing.
  private static final Logger log = LoggerFactory.getLogger(DeliveryTask.class);

//  public static final String VHOST = "NotificationsHost";
//  public static final String DEFAULT_BINDING_KEY = "#";
//  public static final String EXCHANGE_MAIN = "tapis.notifications.exchange";
//  public static final String QUEUE_MAIN = "tapis.notifications.queue";

  /* ********************************************************************** */
  /*                                Enums                                   */
  /* ********************************************************************** */

  /* ********************************************************************** */
  /*                                 Fields                                 */
  /* ********************************************************************** */

  // Use HK2 to inject singletons
  @Inject
  private NotificationsDao dao;

  private final Notification notification; // The notification to be processed
  private final int bucketNum; // Bucket that generated the notification
  private final DeliveryMethod deliveryMethod;

  /* ********************************************************************** */
  /*                             Constructors                               */
  /* ********************************************************************** */

  DeliveryTask(NotificationsDao dao1, Notification n1)
  {
    dao = dao1;
    notification = n1;
    bucketNum = n1.getBucketNum();
    deliveryMethod = n1.getDeliveryMethod();
  }
  
  /* ********************************************************************** */
  /*                             Public Methods                             */
  /* ********************************************************************** */

  /*
   * Main method for thread.start
   */
  @Override
  public String call()
  {
    log.info("**** Starting Delivery task");
    String retSuccess = "Delivery task complete. deliveryMethod: " + deliveryMethod;
    String retFail = "Delivery task failed. deliveryMethod: " + deliveryMethod;

    boolean delivered = false;
    log.info("**** Delivery task first attempt");
    try
    {
      delivered = deliverNotification();
    }
    catch (IOException e)
    {
      // TODO
      log.warn("Caught exception: " + e.getMessage(), e);
    }

    if (delivered)
    {
      // First attempt succeeded
      // TODO: What if we crash before removing notification?
      //       and what if dao call throws exception?
//      dao.deleteNotification(notification);
      return retSuccess;
    }

    // Pause and then try one more time
    try {log.info("Sleep 15 seconds"); Thread.sleep(15000); } catch (InterruptedException e) {}
    log.info("**** Delivery task second attempt");
    try
    {
      delivered = deliverNotification();
    }
    catch (IOException e)
    {
      // TODO
      log.warn("Caught exception: " + e.getMessage(), e);
      return retFail;
    }

    // Second attempt succeeded
    // TODO: What if we crash before removing notification?
    //       and what if dao call throws exception? return false? re-throw?
//      dao.deleteNotification(notification);
    return retSuccess;
  }

  /* ********************************************************************** */
  /*                             Accessors                                  */
  /* ********************************************************************** */

  public int getBucketNum() { return bucketNum; }

  /* ********************************************************************** */
  /*                             Private Methods                            */
  /* ********************************************************************** */

  /*
   * TODO Send out the notification
   */
  private boolean deliverNotification() throws IOException
  {
    Event event = notification.getEvent();
    log.info("Processing notification for event. Source: {} Type: {} Subject: {} SeriesId: {} Time: {} UUID {}",
             event.getSource(), event.getType(), event.getSubject(), event.getSeriesId(),
             event.getTime(), event.getUuid());
    log.info("TODO Deliver notification. DeliveryType: {} DeliveryAddress: {}", deliveryMethod.getDeliveryType(),
             deliveryMethod.getDeliveryAddress());
    try {log.info("Sleep 2 seconds"); Thread.sleep(2000); } catch (InterruptedException e) {};
    return true;
  }
}