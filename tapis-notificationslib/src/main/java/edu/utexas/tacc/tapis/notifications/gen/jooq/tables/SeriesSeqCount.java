/*
 * This file is generated by jOOQ.
 */
package edu.utexas.tacc.tapis.notifications.gen.jooq.tables;


import edu.utexas.tacc.tapis.notifications.gen.jooq.Keys;
import edu.utexas.tacc.tapis.notifications.gen.jooq.TapisNtf;
import edu.utexas.tacc.tapis.notifications.gen.jooq.tables.records.SeriesSeqCountRecord;

import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SeriesSeqCount extends TableImpl<SeriesSeqCountRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>tapis_ntf.series_seq_count</code>
     */
    public static final SeriesSeqCount SERIES_SEQ_COUNT = new SeriesSeqCount();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SeriesSeqCountRecord> getRecordType() {
        return SeriesSeqCountRecord.class;
    }

    /**
     * The column <code>tapis_ntf.series_seq_count.tenant</code>.
     */
    public final TableField<SeriesSeqCountRecord, String> TENANT = createField(DSL.name("tenant"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>tapis_ntf.series_seq_count.source</code>.
     */
    public final TableField<SeriesSeqCountRecord, String> SOURCE = createField(DSL.name("source"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>tapis_ntf.series_seq_count.subject</code>.
     */
    public final TableField<SeriesSeqCountRecord, String> SUBJECT = createField(DSL.name("subject"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>tapis_ntf.series_seq_count.series_id</code>.
     */
    public final TableField<SeriesSeqCountRecord, String> SERIES_ID = createField(DSL.name("series_id"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>tapis_ntf.series_seq_count.seq_count</code>.
     */
    public final TableField<SeriesSeqCountRecord, Integer> SEQ_COUNT = createField(DSL.name("seq_count"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("0", SQLDataType.INTEGER)), this, "");

    private SeriesSeqCount(Name alias, Table<SeriesSeqCountRecord> aliased) {
        this(alias, aliased, null);
    }

    private SeriesSeqCount(Name alias, Table<SeriesSeqCountRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>tapis_ntf.series_seq_count</code> table reference
     */
    public SeriesSeqCount(String alias) {
        this(DSL.name(alias), SERIES_SEQ_COUNT);
    }

    /**
     * Create an aliased <code>tapis_ntf.series_seq_count</code> table reference
     */
    public SeriesSeqCount(Name alias) {
        this(alias, SERIES_SEQ_COUNT);
    }

    /**
     * Create a <code>tapis_ntf.series_seq_count</code> table reference
     */
    public SeriesSeqCount() {
        this(DSL.name("series_seq_count"), null);
    }

    public <O extends Record> SeriesSeqCount(Table<O> child, ForeignKey<O, SeriesSeqCountRecord> key) {
        super(child, key, SERIES_SEQ_COUNT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : TapisNtf.TAPIS_NTF;
    }

    @Override
    public UniqueKey<SeriesSeqCountRecord> getPrimaryKey() {
        return Keys.SERIES_SEQ_COUNT_PKEY;
    }

    @Override
    public SeriesSeqCount as(String alias) {
        return new SeriesSeqCount(DSL.name(alias), this);
    }

    @Override
    public SeriesSeqCount as(Name alias) {
        return new SeriesSeqCount(alias, this);
    }

    @Override
    public SeriesSeqCount as(Table<?> alias) {
        return new SeriesSeqCount(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public SeriesSeqCount rename(String name) {
        return new SeriesSeqCount(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SeriesSeqCount rename(Name name) {
        return new SeriesSeqCount(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public SeriesSeqCount rename(Table<?> name) {
        return new SeriesSeqCount(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<String, String, String, String, Integer> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super String, ? super String, ? super String, ? super String, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super String, ? super String, ? super String, ? super String, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
