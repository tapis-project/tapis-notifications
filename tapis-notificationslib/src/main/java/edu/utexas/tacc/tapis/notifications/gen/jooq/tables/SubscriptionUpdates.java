/*
 * This file is generated by jOOQ.
 */
package edu.utexas.tacc.tapis.notifications.gen.jooq.tables;


import com.google.gson.JsonElement;

import edu.utexas.tacc.tapis.notifications.dao.JSONBToJsonElementBinding;
import edu.utexas.tacc.tapis.notifications.gen.jooq.Keys;
import edu.utexas.tacc.tapis.notifications.gen.jooq.TapisNtf;
import edu.utexas.tacc.tapis.notifications.gen.jooq.tables.records.SubscriptionUpdatesRecord;
import edu.utexas.tacc.tapis.notifications.model.Subscription.SubscriptionOperation;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.EnumConverter;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SubscriptionUpdates extends TableImpl<SubscriptionUpdatesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>tapis_ntf.subscription_updates</code>
     */
    public static final SubscriptionUpdates SUBSCRIPTION_UPDATES = new SubscriptionUpdates();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SubscriptionUpdatesRecord> getRecordType() {
        return SubscriptionUpdatesRecord.class;
    }

    /**
     * The column <code>tapis_ntf.subscription_updates.seq_id</code>.
     */
    public final TableField<SubscriptionUpdatesRecord, Integer> SEQ_ID = createField(DSL.name("seq_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>tapis_ntf.subscription_updates.subscription_seq_id</code>.
     */
    public final TableField<SubscriptionUpdatesRecord, Integer> SUBSCRIPTION_SEQ_ID = createField(DSL.name("subscription_seq_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>tapis_ntf.subscription_updates.obo_tenant</code>.
     */
    public final TableField<SubscriptionUpdatesRecord, String> OBO_TENANT = createField(DSL.name("obo_tenant"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>tapis_ntf.subscription_updates.obo_user</code>.
     */
    public final TableField<SubscriptionUpdatesRecord, String> OBO_USER = createField(DSL.name("obo_user"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>tapis_ntf.subscription_updates.api_tenant</code>.
     */
    public final TableField<SubscriptionUpdatesRecord, String> API_TENANT = createField(DSL.name("api_tenant"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>tapis_ntf.subscription_updates.api_user</code>.
     */
    public final TableField<SubscriptionUpdatesRecord, String> API_USER = createField(DSL.name("api_user"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>tapis_ntf.subscription_updates.subscription_id</code>.
     */
    public final TableField<SubscriptionUpdatesRecord, String> SUBSCRIPTION_ID = createField(DSL.name("subscription_id"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>tapis_ntf.subscription_updates.operation</code>.
     */
    public final TableField<SubscriptionUpdatesRecord, SubscriptionOperation> OPERATION = createField(DSL.name("operation"), SQLDataType.CLOB.nullable(false), this, "", new EnumConverter<String, SubscriptionOperation>(String.class, SubscriptionOperation.class));

    /**
     * The column <code>tapis_ntf.subscription_updates.description</code>.
     */
    public final TableField<SubscriptionUpdatesRecord, JsonElement> DESCRIPTION = createField(DSL.name("description"), SQLDataType.JSONB.nullable(false), this, "", new JSONBToJsonElementBinding());

    /**
     * The column <code>tapis_ntf.subscription_updates.raw_data</code>.
     */
    public final TableField<SubscriptionUpdatesRecord, String> RAW_DATA = createField(DSL.name("raw_data"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>tapis_ntf.subscription_updates.uuid</code>.
     */
    public final TableField<SubscriptionUpdatesRecord, java.util.UUID> UUID = createField(DSL.name("uuid"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>tapis_ntf.subscription_updates.created</code>.
     */
    public final TableField<SubscriptionUpdatesRecord, LocalDateTime> CREATED = createField(DSL.name("created"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("timezone('utc'::text, now())", SQLDataType.LOCALDATETIME)), this, "");

    private SubscriptionUpdates(Name alias, Table<SubscriptionUpdatesRecord> aliased) {
        this(alias, aliased, null);
    }

    private SubscriptionUpdates(Name alias, Table<SubscriptionUpdatesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>tapis_ntf.subscription_updates</code> table reference
     */
    public SubscriptionUpdates(String alias) {
        this(DSL.name(alias), SUBSCRIPTION_UPDATES);
    }

    /**
     * Create an aliased <code>tapis_ntf.subscription_updates</code> table reference
     */
    public SubscriptionUpdates(Name alias) {
        this(alias, SUBSCRIPTION_UPDATES);
    }

    /**
     * Create a <code>tapis_ntf.subscription_updates</code> table reference
     */
    public SubscriptionUpdates() {
        this(DSL.name("subscription_updates"), null);
    }

    public <O extends Record> SubscriptionUpdates(Table<O> child, ForeignKey<O, SubscriptionUpdatesRecord> key) {
        super(child, key, SUBSCRIPTION_UPDATES);
    }

    @Override
    public Schema getSchema() {
        return TapisNtf.TAPIS_NTF;
    }

    @Override
    public Identity<SubscriptionUpdatesRecord, Integer> getIdentity() {
        return (Identity<SubscriptionUpdatesRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<SubscriptionUpdatesRecord> getPrimaryKey() {
        return Keys.SUBSCRIPTION_UPDATES_PKEY;
    }

    @Override
    public List<UniqueKey<SubscriptionUpdatesRecord>> getKeys() {
        return Arrays.<UniqueKey<SubscriptionUpdatesRecord>>asList(Keys.SUBSCRIPTION_UPDATES_PKEY);
    }

    @Override
    public List<ForeignKey<SubscriptionUpdatesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<SubscriptionUpdatesRecord, ?>>asList(Keys.SUBSCRIPTION_UPDATES__SUBSCRIPTION_UPDATES_SUBSCRIPTION_SEQ_ID_FKEY);
    }

    private transient Subscriptions _subscriptions;

    public Subscriptions subscriptions() {
        if (_subscriptions == null)
            _subscriptions = new Subscriptions(this, Keys.SUBSCRIPTION_UPDATES__SUBSCRIPTION_UPDATES_SUBSCRIPTION_SEQ_ID_FKEY);

        return _subscriptions;
    }

    @Override
    public SubscriptionUpdates as(String alias) {
        return new SubscriptionUpdates(DSL.name(alias), this);
    }

    @Override
    public SubscriptionUpdates as(Name alias) {
        return new SubscriptionUpdates(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SubscriptionUpdates rename(String name) {
        return new SubscriptionUpdates(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SubscriptionUpdates rename(Name name) {
        return new SubscriptionUpdates(name, null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<Integer, Integer, String, String, String, String, String, SubscriptionOperation, JsonElement, String, java.util.UUID, LocalDateTime> fieldsRow() {
        return (Row12) super.fieldsRow();
    }
}
